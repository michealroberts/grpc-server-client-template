# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: ping.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import ping_pb2


class PingServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Ping(self, stream: 'grpclib.server.Stream[ping_pb2.PingRequest, ping_pb2.PongReply]') -> None:
        pass

    @abc.abstractmethod
    async def UnaryStreamPing(self, stream: 'grpclib.server.Stream[ping_pb2.PingRequest, ping_pb2.PongReply]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hypergrpc.ping.v1.PingService/Ping': grpclib.const.Handler(
                self.Ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                ping_pb2.PingRequest,
                ping_pb2.PongReply,
            ),
            '/hypergrpc.ping.v1.PingService/UnaryStreamPing': grpclib.const.Handler(
                self.UnaryStreamPing,
                grpclib.const.Cardinality.UNARY_STREAM,
                ping_pb2.PingRequest,
                ping_pb2.PongReply,
            ),
        }


class PingServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Ping = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hypergrpc.ping.v1.PingService/Ping',
            ping_pb2.PingRequest,
            ping_pb2.PongReply,
        )
        self.UnaryStreamPing = grpclib.client.UnaryStreamMethod(
            channel,
            '/hypergrpc.ping.v1.PingService/UnaryStreamPing',
            ping_pb2.PingRequest,
            ping_pb2.PongReply,
        )
